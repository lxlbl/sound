import requests 
import re
from lxml import etree
from tqdm import tqdm
from threading import Thread
import librosa
from multiprocessing import Process
import time
import concurrent.futures
start_time=time.time()

links=[]
mlist=[]
#从网址中获取新的地址列表
class GetLink(Thread):
    def __init__(self,url):
        super().__init__()
        self._url=url
    def run(self):
        global links
        response=requests.get(self._url)
        html=etree.HTML(response.text)
        for j in range(0,50):
            links = links+html.xpath('//*[@id="righter"]/div[3]/ul/li[%s]/a/@href'%str(j))  

#从1中获取的链接获取mp3文件链接
class GetMusicLink(Thread):
    def __init__(self,headers):
        super().__init__()
        self._headers=headers
    def run(self):
        global mlist
        global links
        for link in tqdm(links[:5]):
            url='https://www.51voa.com'+link
            response=requests.get(url,headers=self._headers)
            mlist=mlist+list(set(re.findall(r'https://.+?\.mp3', response.text)))
            
#将文件保存到本地 
class SaveMusic(Thread):
    def __init__(self,headers):
        super().__init__()
        self._headers=headers
    def run(self):
        global mlist
        for url in tqdm(mlist):
            response_text = requests.get(url,headers = self._headers).content
            fname = url[url.rfind('/')+1:]
            with open(fname,'wb') as f:
                f.write(response_text)
                
def load_music(murl,headers):
    response_text = requests.get(murl,headers = headers).content
    fname = murl[murl.rfind('/')+1:]
    with open(fname,'wb') as f:
        f.write(response_text)
    return fname

#对存储的音频文件计算语速         
class VoiceSpeed(Thread):
    def __init__(self,f):
        super().__init__()
        self._f=f
    def run(self):
        try:
            y,sr=librosa.load(self._f)
            onsets = librosa.onset.onset_detect(y=y,sr=sr,units="time",hop_length=128,backtrack=False) 
            print(onsets)
        except Exception as e:
            print(f"Error processing file {self._f}: {e}")
#使用多进程来计算存储文件的语速

class VoiceSpeed2(Process):
    def __init__(self,f):
        super().__init__()
        self._f=f
    def run(self):
        try:
            y,sr=librosa.load(self._f)
            onsets = librosa.onset.onset_detect(y=y,sr=sr,units="time",hop_length=128,backtrack=False) 
            print(onsets)
        except Exception as e:
            print(f"Error processing file {self._f}: {e}")

if  __name__=="__main__":
    headers = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36'
    }
    tlist=[]
    for i in tqdm(range(3, 5)):
        url = f'https://www.51voa.com/VOA_Standard_{i}.html'
        t1 = GetLink(url)
        tlist.append(t1)
    for t in tlist:
        t.start()
    for t in tlist:
        t.join()
    t2 = GetMusicLink(headers)
    t2.start()
    t2.join()
    
    t3 = SaveMusic(headers)
    t3.start()
    t3.join()
    
    t_list=[]
    for murl in mlist:
        fname = murl[murl.rfind('/')+1:]
        #t4 = VoiceSpeed(fname)
        t4 = VoiceSpeed2(fname)
        t_list.append(t4)
    for t in t_list:
        t.start()
    for t in t_list:
        t.join()
        
    '''with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
        future_to_url = {executor.submit(load_music, murl, headers): murl for murl in mlist}
    for future in concurrent.futures.as_completed(future_to_url):
        murl = future_to_url[future]
        try:
            f = future.result()
            y,sr=librosa.load(f)
            onsets = librosa.onset.onset_detect(y=y,sr=sr,units="time",hop_length=128,backtrack=False) 
            print(onsets)
        except Exception as exc:
            print('%r generated an exception: %s' % (url, exc))
        #else:
            #print('%r page is %d KB' % (url, (len(f)//8)//1024))'''
    
    print(len(links),links[:10])
    print('#'*20)
    print(len(mlist),mlist[:10])

end_time=time.time()
elapsed_time = end_time - start_time
print(f"Elapsed time: {elapsed_time:.2f} seconds")
