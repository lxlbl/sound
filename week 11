import librosa
from multiprocessing import Process,Queue
import numpy as np
def read_voice(q):
    ys=[]#保存声音文件的列表
    #srs=[]
    for i in range(1,23):
        f='C:/Users/DELL/Desktop/python数据分析/music/'+str(i)+'.mp3'#声音文件路径
        y,sr=librosa.load(f)#载入声音文件
        ys.append(y)
        #srs.append(sr)
    q.put(ys)
    return ys #srs

def get_voice(q):
    ys=q.get()
    #利用libraso提供的支持来计算音高和声强，并保存计算结果到文件（一个声音一个文件 ）
    for j in range(22):
        y=ys[j]
        pitch = librosa.yin(y,fmin = librosa.note_to_hz('C1'),fmax = librosa.note_to_hz('C7'))
        sdb = librosa.amplitude_to_db(librosa.feature.rms(y=y), ref=0.00002)
        ff='C:/Users/DELL/Desktop/python数据分析/music/save'+str(j)+'.npy'
        np.save(ff,pitch)
        np.save(ff,sdb)
        
#通过继承Process类来构建子进程，同样利用libraso提供的支持来计算音高和声强，
# 并保存计算结果到文件（一个声音一个文件 ）
class GetVoice(Process):
    def __init__(self,q):
        super().__init__()#必须写才算是进程
        self._q=q
        #self._qq=qq
    def run(self):
        ys=self._q.get()
        for j in range(22):
            y=ys[j]
            pitch = librosa.yin(y,fmin = librosa.note_to_hz('C1'),fmax = librosa.note_to_hz('C7'))
            sdb = librosa.amplitude_to_db(librosa.feature.rms(y=y), ref=0.00002)
            fc='C:/Users/DELL/Desktop/python数据分析/music/ssss'+str(j)+'.npy'
            np.save(fc,pitch)
            np.save(fc,sdb)
            
if __name__=="__main__":
    q=Queue()
    read_voice(q)
    
    p=Process(target=get_voice,args=(q,))
    p.start()
    p.join()
    print('*'*10)
    
    g=GetVoice(q)
    g.start()
    g.join()
    print("#"*10)
